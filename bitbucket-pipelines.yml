image: andrecastrogarcia/dotnet-sonar:latest

pipelines:
  branches:
    master:
      - step:
          name: Build and Test
          caches:
            - dotnetcore
          script:
            - dotnet restore
            - dotnet /sonar/SonarScanner.MSBuild.dll begin /k:"ducktales" /d:sonar.organization="andre-castro-garcia-bitbucket" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.login="bec3ceeae9799bfdc3a26f99597dc9ca21fe04bc" /d:sonar.cs.opencover.reportsPaths="test/ducktales.tests/coverage/coverage.xml"
            - dotnet build
            - dotnet test /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutputDirectory=coverage /p:Exclude="[NUnit3.*]*" test/ducktales.tests/ducktales.tests.csproj
            - dotnet /sonar/SonarScanner.MSBuild.dll end /d:sonar.login="bec3ceeae9799bfdc3a26f99597dc9ca21fe04bc"
      - step:
          name: Deploy to Docker Hub
          image: atlassian/pipelines-awscli
          services:
            - docker
          script:
            # Dockerhub Authentication variables
            # set DOCKER_HUB_USERNAME and DOCKER_HUB_PASSWORD as environment variables
            - export DOCKER_HUB_USERNAME=andrecastrogarcia
            - export DOCKER_HUB_PASSWORD=It3r1509
            # Docker variables
            - export IMAGE_NAME="${DOCKER_HUB_USERNAME}/${BITBUCKET_REPO_SLUG}"
            # Deploying an image built from pipelines
            - docker build -t "${IMAGE_NAME}" .
            - docker login --username "${DOCKER_HUB_USERNAME}" --password "${DOCKER_HUB_PASSWORD}"
            - docker tag "${IMAGE_NAME}" "${IMAGE_NAME}":"${BITBUCKET_BUILD_NUMBER}"
            - docker push "${IMAGE_NAME}"
      - step:
          name: Deploy to ECS
          deployment: production
          image: atlassian/pipelines-awscli
          script:
            # AWS authentication variables
            - export AWS_ACCESS_KEY_ID="AKIAJSAL5BBXGQSCCSQA"
            - export AWS_SECRET_ACCESS_KEY="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"
            - export AWS_DEFAULT_REGION="sa-east-1"
            
            # ECS variables
            - export ECS_CLUSTER_NAME="default"
            - export ECS_SERVICE_NAME="ducktales"
            - export ECS_TASK_NAME="${BITBUCKET_REPO_SLUG}"
            
            # Docker Hub Vars
            - export DOCKER_HUB_USERNAME="andrecastrogarcia"
            - export IMAGE_NAME="${DOCKER_HUB_USERNAME}/${BITBUCKET_REPO_SLUG}"
            
            # Create ECS cluster, task, service
            - aws ecs list-clusters | grep "${ECS_CLUSTER_NAME}" || aws ecs create-cluster --cluster-name "${ECS_CLUSTER_NAME}"
            
            # Updating the existing cluster, task, service
            - export TASK_VERSION=$(aws ecs register-task-definition --family "${ECS_TASK_NAME}" --container-definitions '[{"name":"app","image":"'"${IMAGE_NAME}"'","memory":1024}]' | jq --raw-output '.taskDefinition.revision')
            - echo "Registered ECS Task Definition:" "${TASK_VERSION}"
            
            # Create ECS Service
            - aws ecs list-services --cluster "${ECS_CLUSTER_NAME}"  | grep "${ECS_SERVICE_NAME}" || aws ecs create-service --service-name "${ECS_SERVICE_NAME}" --cluster "${ECS_CLUSTER_NAME}" --task-definition "${ECS_TASK_NAME}" --desired-count 1
            - aws ecs update-service --cluster "${ECS_CLUSTER_NAME}" --service "${ECS_SERVICE_NAME}" --task-definition "${ECS_TASK_NAME}:${TASK_VERSION}"
            
            